<div class="btn-toolbar">
  <div class="btn-group pull-left" id="checkTimestamp">
    <a class="old btn" href="#">&lt;</a>
    <a class="recent btn" href="#">&gt;</a>
  </div>
  <div class="btn-group pull-right" data-toggle="buttons-radio" id="checkPeriods">
    <a class="btn active" data-period="24h" href="#">last 24h</a>
    <a class="btn" data-period="hour" data-increment="3600000" href="#">hour</a>
    <a class="btn" data-period="day" data-increment="86400000" href="#">day</a>
    <a class="btn" data-period="month" data-increment="2505600000" href="#">month</a>
  </div>
</div>
<div class="row">
  <h2 id="statPeriodTitle"><small></small></h2>
</div>
<table class="table" id="checks">
  <thead>
    <tr>
      <th>Name</th>
      <th>Status</th>
      <th title="Percentage of all pings up in the last 24h">Availability</th>
      <th title="Percentage of all pings below slow threshold in the last 24h">Responsiveness</th>
      <th title="Total downtime in the last 24h">Downtime</th>
      <th title="Average response time of all pings in the last 24h">Avg. Response time</th>
    </tr>
  </thead>
  <tbody></tbody>
</table>
<script src="<%= route %>/javascripts/bootstrap-button.js"></script>
<script src="<%= route %>/javascripts/jquery.timeago.js"></script>
<script src="<%= route %>/javascripts/jquery.tablesorter.min.js"></script>
<script src="<%= route %>/javascripts/ejs.min.js"></script>
<script id="check_template" type="text/template">
<tr>
  <td data-sort="{{= check.name }}">
    <a href="{{=  route + '/check/' + check._id }}">{{= check.name }}</a>
    <a href="{{= check.url }}" target="_blank"><img src="{{= route }}/images/external-link-ltr-icon.png"></a>
  </td>
  {{ if (check.lastTested) { }}
    {{ if (check.isPaused) { }}
  <td data-sort="{{= check.isUp ? check.uptime : -check.downtime }}"><span class="label label-info">paused</span> <span class="blue"> for <span class="timeago" title="{{= check.lastTested }}"></span></span></td>
    {{ } else if (check.isUp) { }}
  <td data-sort="{{= check.uptime }}"><span class="label label-success">Up</span> <span class="green"> for <span class="timeago" title="{{= check.lastChanged }}"></span></span></td>
    {{ } else { }}
  <td data-sort="{{= -check.downtime }}"><span class="label label-important">Down</span> <span class="red"> for <span class="timeago" title="{{= check.lastChanged }}"></span></span></td>
    {{ } }}
  {{ } else { }}
  <td data-sort="0"><span class="label label-important">down</span> <span class="label label-warning">new</span></td>
  {{ } }}
  {{ if (check.qos) { }}
  <td data-sort="{{= check.qos.ups / check.qos.count }}">{{= ((check.qos.ups / check.qos.count) * 100).toFixed(3).replace('.000', '') }}%</td>
  <td data-sort="{{= check.qos.responsives / check.qos.count }}">{{= ((check.qos.responsives / check.qos.count) * 100).toFixed(3).replace('.000', '') }}%</td>
  <td data-sort="{{= check.qos.downtime }}">{{= (check.qos.downtime / 1000).toFixed() }}s</td>
  <td data-sort="{{= check.qos.time / check.qos.count }}">{{= Math.round(check.qos.time / check.qos.count) }}ms</td>
  {{ } else { }}
  <td data-sort="0">-</td>
  <td data-sort="0">-</td>
  <td data-sort="0">-</td>
  <td data-sort="0">-</td>
  {{ } }}
</tr>
</script>
<script>
var statPeriod = '24h';
var statIncrement = 1000 * 60 * 60;
var statTime = Date.now();
jQuery(document).ready(function($) {
  var init = function() { 
    $('#checks').tablesorter({
      textExtraction: function(node) {
        return $(node).data('sort');
      },
      sortList: [[1,0]]
    });
    $.timeago.settings.strings.suffixAgo = null;
    var check_template = document.getElementById('check_template').innerHTML;
    var ejs = require('ejs');
    ejs.open = '{{';
    ejs.close = '}}';
    var updateChecks = function() {
      $.getJSON('<%= url %>' + statPeriod + '/' + statTime, function(checks) {
        var lines = [];
        var lastTest = 0;
        $.each(checks, function(key, check) {
          if (new Date(check.lastTested) > lastTest) {
            lastTest = new Date(check.lastTested);
          }
          lines.push(ejs.render(check_template, { check: check, route: '<%= route %>' }));
        });
        $('#checks tbody').html(lines.join(''));
        $('#checks').trigger('update');
        $('#checks .timeago').timeago();
        if (lastTest) {
          $('#last_update').text('Last updated on ' + new Date(lastTest).toLocaleString());
        }
      });
    }
    $('#checkPeriods a').click(function(e) {
      statPeriod = $(this).data('period');
      if (statPeriod == '24h') {
        $('#checkTimestamp').hide();
        statTime = Date.now();
      } else {
        $('#checkTimestamp').show();
        statIncrement = $(this).data('increment');
      }
      updateChecks();
      e.preventDefault();
    });
    $('#checkTimestamp .old').click(function() {
      statTime -= statIncrement;
      $('#checkTimestamp .recent').show();
      updateChecks();
    });
    $('#checkTimestamp .recent').click(function() {
      statTime += statIncrement;
      if ((statTime + statIncrement) >= Date.now()) $(this).hide();
      updateChecks();
    }).hide();
    $('#checkTimestamp').hide();
    updateChecks();
    socket.on('CheckEvent', updateChecks);
    window.setInterval(updateChecks, 5 * 60 * 1000); // refresh every 5 minutes to update the qos scores
  };
  if ($('a[data-toggle="tab"]').length) {
    $('a[data-toggle="tab"][href="#tagchecks"]').one('shown', init);
  } else {
    init();
  }
});
</script>